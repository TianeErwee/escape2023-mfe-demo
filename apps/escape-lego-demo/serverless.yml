service: escape-lego-demo

plugins:
  - 'serverless-bundle'
  - serverless-offline

package:
  individually: true

custom:
  stage: ${opt:stage, env:STAGE, 'dev'}
  serverless-offline:
    httpPort: 3333
    lambdaPort: 2333
    noPrependStageInUrl: true
  bundle:
    linting: false
    tsConfig: 'tsconfig.app.json'

params:
  prod:
    production: true
  default:
    production: false

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${self:custom.stage}
  endpointType: regional
  timeout: 20
  region: eu-west-1
  profile: escape
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": [ "InventoryUsers", "Arn" ] }
        - { "Fn::GetAtt": [ "LegoSetsInventory", "Arn" ] }
        - { "Fn::GetAtt": [ "LegoSetsWishlist", "Arn" ] }
  environment:
    APP_ENV: ${self:custom.stage}
    IS_PRODUCTION: ${param:production}
    NODE_OPTIONS: --enable-source-maps
  
resources:
  Resources:
    LegoSetsWishlist:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: wishlist_id
            AttributeType: S
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: wishlist_id
            KeyType: HASH
          -
            AttributeName: user_id
            KeyType: RANGE
        TableName: lego-set-wishlist
        BillingMode: 'PAY_PER_REQUEST'

    LegoSetsInventory:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: user_id
            KeyType: HASH
        TableName: lego-set-inventory
        BillingMode: 'PAY_PER_REQUEST'

    InventoryUsers:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user_id
            AttributeType: S
        KeySchema:
          -
            AttributeName: user_id
            KeyType: HASH
        TableName: inventory-users
        BillingMode: 'PAY_PER_REQUEST'

    DashboardS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tiane-escape-dashboard-app

    InventoryS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tiane-escape-inventory-app

    WishlistS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tiane-escape-wishlist-app

    DashboardDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: Dashboard Distribution
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: DashboardS3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          Origins:
            - Id: DashboardS3Origin
              DomainName: !GetAtt DashboardS3Bucket.DomainName
              S3OriginConfig:
                OriginAccessIdentity: ''
          DefaultRootObject: index.html
          PriceClass: PriceClass_100

    InventoryDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: Inventory Distribution
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: InventoryS3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          Origins:
            - Id: InventoryS3Origin
              DomainName: !GetAtt InventoryS3Bucket.DomainName
              S3OriginConfig:
                OriginAccessIdentity: ''
          DefaultRootObject: index.html
          PriceClass: PriceClass_100

    WishlistDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Comment: Wishlist Distribution
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: WishlistS3Origin
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          Origins:
            - Id: WishlistS3Origin
              DomainName: !GetAtt WishlistS3Bucket.DomainName
              S3OriginConfig:
                OriginAccessIdentity: ''
          DefaultRootObject: index.html
          PriceClass: PriceClass_100
    
functions:
  getsets:
    handler: src/handlers/get-sets.handler
    events:
      - http:
          method: GET
          path: /api/getsets
  add-to-inventory:
    handler: src/handlers/add-to-inventory.handler
    events:
      - http:
          method: POST
          path: /api/add-to-inventory
  add-to-wishlist:
    handler: src/handlers/add-to-wishlist.handler
    events:
      - http:
          method: POST
          path: /api/add-to-wishlist
  create-wishlist:
    handler: src/handlers/create-wishlist.handler
    events:
      - http:
          method: POST
          path: /api/create-wishlist
  add-user:
    handler: src/handlers/add-user.handler
    events:
      - http:
          method: POST
          path: /api/add-user
  get-inventory:
    handler: src/handlers/get-inventory.handler
    events:
      - http:
          method: GET
          path: /api/get-inventory
  get-wishlists-by-user:
    handler: src/handlers/get-wishlists-by-user.handler
    events:
      - http:
          method: GET
          path: /api/get-wishlists-by-user
  move-to-inventory:
    handler: src/handlers/move-to-inventory.handler
    events:
      - http:
          method: POST
          path: /api/move-to-inventory
